import streamlit as st
from PIL import Image
import numpy as np
import cv2
import module.Chapter3 as c3
import module.Chapter4 as c4
import module.Chapter5 as c5
import module.Chapter9 as c9

st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh", page_icon="üòÉ", layout="wide")

st.markdown("# X·ª≠ l√Ω ·∫£nh")

# C√°c t√πy ch·ªçn x·ª≠ l√Ω ·∫£nh
options = [
    "Negative", 
    "Logarithm", 
    "PiecewiseLinear", 
    "Histogram", 
    "HistEqual", 
    "HistEqualColor", 
    "LocalHist", 
    "HistStat", 
    "BoxFilter", 
    "LowpassGauss", 
    "Threshold", 
    "MedianFilter", 
    "Sharpen", 
    "Gradient", 
    "Spectrum", 
    "FrequencyFilter", 
    "DrawNotchRejectFilter", 
    "RemoveMoire", 
    "CreateMotionNoise", 
    "DenoiseMotion", 
    "DenoisestMotion",
    "ConnectedComponent", 
    "CountRice"
]

# T·∫°o selection box ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω ·∫£nh
selected_option = st.selectbox("Ch·ªçn ch·ª©c nƒÉng x·ª≠ l√Ω ·∫£nh", options)

# N√∫t Open Image ƒë·ªÉ ch·ªçn ·∫£nh v√† hi·ªÉn th·ªã b·∫£n xem tr∆∞·ªõc
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt ·∫£nh", type=["jpg", "jpeg", "png", "tif"])
process_button = st.button("X·ª≠ l√Ω")

L = 256

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    img_array = np.array(image)
    
    # S·ª≠ d·ª•ng c·ªôt ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ x·ª≠ l√Ω tr√™n c√πng m·ªôt h√†ng
    col1, col2 = st.columns(2)
    col1.image(img_array, caption='·∫¢nh g·ªëc', width=400)

    # N√∫t "X·ª≠ l√Ω" ƒë·ªÉ x·ª≠ l√Ω ·∫£nh
    if process_button:
        # X·ª≠ l√Ω ·∫£nh theo ch·ª©c nƒÉng ƒë√£ ch·ªçn
        processed_img = None
        if selected_option == "Negative":
            processed_img = c3.Negative(img_array)

        elif selected_option == "Logarithm":
            processed_img = c3.Logarithm(img_array)

        elif selected_option == "PiecewiseLinear":
            processed_img = c3.PiecewiseLinear(img_array)

        elif selected_option == "Histogram":
            processed_img = c3.Histogram(img_array)

        elif selected_option == "HistEqual":
            processed_img = c3.HistEqual(img_array)

        elif selected_option == "HistEqualColor":
            processed_img = c3.HistEqualColor(img_array)

        elif selected_option == "LocalHist":
            processed_img = c3.LocalHist(img_array)

        elif selected_option == "HistStat":
            processed_img = c3.HistStat(img_array)

        elif selected_option == "BoxFilter":
            processed_img = c3.BoxFilter(img_array)

        elif selected_option == "LowpassGauss":
            processed_img = c3.LowpassGauss(img_array)

        elif selected_option == "Threshold":
            processed_img = c3.Threshold(img_array)

        elif selected_option == "MedianFilter":
            processed_img = c3.MedianFilter(img_array)

        elif selected_option == "Sharpen":
            processed_img = c3.Sharpen(img_array)

        elif selected_option == "Gradient":
            processed_img = c3.Gradient(img_array)

        elif selected_option == "Spectrum":
            processed_img = c4.Spectrum(img_array)

        elif selected_option == "FrequencyFilter":
            processed_img = c4.FrequencyFilter(img_array)

        elif selected_option == "DrawNotchRejectFilter":
            processed_img = c4.DrawNotchRejectFilter(img_array)

        elif selected_option == "RemoveMoire":
            processed_img = c4.RemoveMoire(img_array)

        elif selected_option == "CreateMotionNoise":
            processed_img = c5.CreateMotionNoise(img_array)

        elif selected_option == "DenoiseMotion":
            processed_img = c5.DenoiseMotion(img_array)

        elif selected_option == "DenoisestMotion":
            processed_img = c5.DenoisestMotion(img_array)

        elif selected_option == "ConnectedComponent":
            processed_img = c9.ConnectedComponent(img_array)
        
        elif selected_option == "CountRice":
            processed_img = c9.CountRice(img_array)

        # Hi·ªÉn th·ªã ·∫£nh sau khi x·ª≠ l√Ω (n·∫øu c√≥)
        if processed_img is not None:
            col2.image(processed_img, caption='·∫¢nh ƒë√£ x·ª≠ l√Ω', width=400)
else:
    if process_button:
        st.warning("Vui l√≤ng ch·ªçn m·ªôt ·∫£nh tr∆∞·ªõc khi nh·∫•n 'X·ª≠ l√Ω'.")
